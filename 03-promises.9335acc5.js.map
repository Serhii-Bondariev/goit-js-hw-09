{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGoE,SAA3DC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACHH,EACAF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAEhCA,EAAM,G,CAKQQ,SAAhBC,cAAc,SAASC,iBAAiB,UAAUC,eAAgBC,GACvEA,EAAEC,iBACF,MAAMC,EAAeC,SAASC,KAAKP,cAAc,kBAAkBQ,OAC7DC,EAAOH,SAASC,KAAKP,cAAc,iBAAiBQ,OACpDE,EAASJ,SAASC,KAAKP,cAAc,mBAAmBQ,QAGSN,iBACnE,IAAIS,EAAeN,EACnB,IAAK,IAAIO,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAC9B,IACI,MAAMC,QAAexB,EAAcuB,EAAGD,GAEtCG,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqBH,EAAIvB,eAAoBuB,EAAEtB,U,CACzE,MAAO0B,GAELH,EAAA3B,GAAS4B,OAAOG,QAAQ,sBAAoBD,EAAI3B,eAAmB2B,EAAE1B,U,CAEzEoB,GAAgBF,C,EAKxBU,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Функція createPromise створює новий проміс з випадковою можливістю виконання або відхилення.\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n            if (shouldResolve) {\n                resolve({ position, delay });\n            } else {\n                reject({ position, delay });\n            }\n        }, delay);\n    });\n}\n\n// Додаємо слухач події 'submit' до форми.\ndocument.querySelector(\".form\").addEventListener(\"submit\", async function (e) {\n    e.preventDefault();\n    const initialDelay = parseInt(this.querySelector(\"[name='delay']\").value);\n    const step = parseInt(this.querySelector(\"[name='step']\").value);\n    const amount = parseInt(this.querySelector(\"[name='amount']\").value);\n\n    // Створюємо функцію для виконання промісів послідовно в порядку їхнього завершення.\n    async function executePromisesSequentially() {\n        let currentDelay = initialDelay;\n        for (let i = 1; i <= amount; i++) {\n            try {\n                const result = await createPromise(i, currentDelay);\n                // Відображаємо сповіщення успішного виконання промісу.\n                Notiflix.Notify.success(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n            } catch (error) {\n                // Відображаємо сповіщення про відхилення промісу та деталі помилки.\n                Notiflix.Notify.failure(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n            }\n            currentDelay += step;\n        }\n    }\n\n    // Викликаємо функцію для виконання промісів послідовно.\n    executePromisesSequentially();\n});\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","async","e","preventDefault","initialDelay","parseInt","this","value","step","amount","currentDelay","i","result","$parcel$interopDefault","Notify","success","error","failure","executePromisesSequentially"],"version":3,"file":"03-promises.9335acc5.js.map"}