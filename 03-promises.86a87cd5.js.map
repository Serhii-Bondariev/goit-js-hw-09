{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEoE,SAA3DC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACHH,EACAF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAExBA,E,IAKcQ,SAAhBC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACjEA,EAAEC,iBASgD,IARlD,IAAMC,EAAeC,SAASC,KAAKN,cAAc,kBAAkBO,OAC7DC,EAAOH,SAASC,KAAKN,cAAc,iBAAiBO,OACpDE,EAASJ,SAASC,KAAKN,cAAc,mBAAmBO,OACxDG,EAAW,GAEbC,EAAeP,EAGVQ,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,EAASG,KAAKxB,EAAcuB,EAAI,EAAGD,IACnCA,GAAgBH,EAIyBhB,QAArCsB,WAAWJ,GACdK,MAAK,SAACC,GAE6BA,EAAxBC,SAAQ,SAACC,GACS,cAAlBA,EAAOC,OAEPC,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAqDC,OAA5BL,EAAOX,MAAMjB,SAAS,QAAyBiC,OAAnBL,EAAOX,MAAMhB,MAAM,OAGhG6B,EAAAjC,GAASkC,OAAOG,QAAQ,sBAAqDD,OAA7BL,EAAOO,OAAOnC,SAAS,QAA0BiC,OAApBL,EAAOO,OAAOlC,MAAM,M,OAI5GmC,OAAM,SAACC,GAEJP,EAAAjC,GAASkC,OAAOO,QAAQ,0B","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n// Функція createPromise створює новий проміс з випадковою можливістю виконання або відхилення.\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n            if (shouldResolve) {\n                resolve({ position, delay });\n            } else {\n                reject({ position, delay });\n            }\n        }, delay);\n    });\n}\n\n// Додаємо слухач події 'submit' до форми.\ndocument.querySelector(\".form\").addEventListener(\"submit\", function (e) {\n    e.preventDefault();\n    const initialDelay = parseInt(this.querySelector(\"[name='delay']\").value);\n    const step = parseInt(this.querySelector(\"[name='step']\").value);\n    const amount = parseInt(this.querySelector(\"[name='amount']\").value);\n    const promises = [];\n\n    let currentDelay = initialDelay;\n\n    // Генеруємо задану кількість промісів і додаємо їх до масиву promises.\n    for (let i = 0; i < amount; i++) {\n        promises.push(createPromise(i + 1, currentDelay));\n        currentDelay += step;\n    }\n\n    // Використовуємо Promise.allSettled для обробки всіх промісів одночасно.\n    Promise.allSettled(promises)\n        .then((results) => {\n            // Обробляємо результати всіх промісів.\n            results.forEach((result) => {\n                if (result.status === \"fulfilled\") {\n                    // Відображаємо сповіщення успішного виконання промісу.\n                    Notiflix.Notify.success(`✅ Fulfilled promise ${result.value.position} in ${result.value.delay}ms`);\n                } else {\n                    // Відображаємо сповіщення про відхилення промісу та деталі помилки.\n                    Notiflix.Notify.failure(`❌ Rejected promise ${result.reason.position} in ${result.reason.delay}ms`);\n                }\n            });\n        })\n        .catch((error) => {\n            // Відображаємо сповіщення про помилку під час обробки промісів.\n            Notiflix.Notify.warning(\"Error handling promises\");\n        });\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","initialDelay","parseInt","this","value","step","amount","promises","currentDelay","i","push","allSettled","then","results","forEach","result","status","$parcel$interopDefault","Notify","success","concat","failure","reason","catch","error","warning"],"version":3,"file":"03-promises.86a87cd5.js.map"}